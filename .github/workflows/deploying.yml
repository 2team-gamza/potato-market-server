name: Backend Server Deploys

on:
  push:
    branches:
      - feature/ecs-fargate

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Make .env.prod
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_PORT: 8000
          envkey_NODE_ENV: prod
          envkey_DB_DATABASE: ${{secrets.DB_DATABASE}}
          envkey_DB_USERNAME: ${{secrets.DB_USERNAME}}
          envkey_DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          envkey_DB_PORT: ${{secrets.DB_PORT}}
          envkey_DB_HOST: ${{secrets.DB_HOST}}

          envkey_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          envkey_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          envkey_BUCKET_NAME: ${{secrets.AWS_S3_BUCKET_NAME}}

          envkey_GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
          envkey_GOOGLE_CLIENT_SECRET: ${{secrets.GOOGLE_CLIENT_SECRET}}
          envkey_GOOGLE_GRANT_TYPE: ${{secrets.GOOGLE_GRANT_TYPE}}

          envkey_SECRET_KEY: ${{secrets.SECRET_KEY}}

          file_name: .env.prod

      - name: version
        id: image-version
        run: |
          VERSION=`cat ./version.txt`-${{ github.run_id }}

          echo "::set-output name=version::$VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-docker-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: potato-server-prod
          IMAGE_TAG: ${{ steps.image-version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Render Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: PotatoServerProdContainer
          image: ${{ steps.build-docker-image.outputs.image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: PotatoServerProd
          cluster: PotatoServerCluster
          wait-for-service-stability: true
